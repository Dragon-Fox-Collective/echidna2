Using = ["Echidna2.Prefabs.Gui", "Echidna2.Gui", "Echidna2.Rendering", "System.Drawing", "OpenTK.Windowing.GraphicsLibraryFramework"]

[This]
Interfaces = [
    "IFieldEditor<string>",
]
Properties = [
    { PropertyType = "Component", Type = "FullRectWithHierarchy", Name = "Rect" },
    { PropertyType = "Component", Type = "Button", Name = "Button", ExposeProperties = false },
    { PropertyType = "Reference", Type = "TextRect", Name = "Text" },
    { PropertyType = "Public", Type = "string", Name = "Value", SetterContent = """
_Value = value;
BufferValue = value;
ValueChanged?.Invoke(value);
""" },
    { PropertyType = "Private", Type = "string", Name = "BufferValue", SetterContent = """
_BufferValue = value;
Text.TextString = value;
""" },
    { PropertyType = "Public", Type = "bool", Name = "IsFocused", SetterContent = """
if (value == IsFocused) return;
_IsFocused = value;

if (IsFocused)
{
    Text.Color = Color.DeepSkyBlue;
    CursorPosition = Value.Length;
}
else
{
    Text.Color = Color.White;
}
""" },
    { PropertyType = "Private", Type = "int", Name = "CursorPosition" },
    { PropertyType = "Event", Type = "object?", Name = "ValueChanged" },
]
Events = [
    { EventType = "Notification", Name = "TextInput", Content = """
if (!IsFocused) return;

if (notification.Key is Keys.Enter)
{
    Value = BufferValue;
    IsFocused = false;
}
else if (notification.Key is Keys.Escape)
{
    BufferValue = Value;
    IsFocused = false;
}
else
{
    string tempBufferValue = BufferValue;
    int tempCursorPosition = CursorPosition;
    notification.Key.ManipulateText(notification.Modifiers, ref tempBufferValue, ref tempCursorPosition);
    BufferValue = tempBufferValue;
    CursorPosition = tempCursorPosition;
}
""" },
    { EventType = "Reference", Target = "Button", Name = "MouseDown", Args = [], Content = """
IsFocused = true;
""" },
    { EventType = "Reference", Target = "Button", Name = "MouseDownOutside", Args = [], Content = """
IsFocused = false;
""" },
]
Functions = [
    { ReturnType = "void", Name = "Load", Args = [{ Type = "string", Name = "value" }], Content = "Value = value;" },
]

[This.Values]
Rect = "2"
Text = "3"
Button = "4"

[2]
Prefab = "../../Gui/FullRectWithHierarchy"
[2.Values]
HorizontalExpand = true
Margin = 4.0
ClipChildren = true
Children = [ "3" ]

[3]
Prefab = "../../Gui/TextRect"
[3.Values]
Justification = "Left"
LocalScale = { X = 0.5, Y = 0.5 }

[4]
Component = "Echidna2.Gui.Button, Echidna2.Gui"
[4.Values]
RectTransform = "2"