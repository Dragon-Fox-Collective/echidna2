Using = ["Notifications.Editor", "Echidna2.Prefabs.Gui", "Echidna2.Gui"]

[This]
Properties = [
    { PropertyType = "Component", Type = "FullRectWindow", Name = "Window" },
    { PropertyType = "Reference", Type = "ICanAddChildren", Name = "ComponentList" },
    { PropertyType = "Public", Type = "Type", Name = "ComponentType" },
    { PropertyType = "Public", Type = "FieldEditors.ReferenceFieldEditor", Name = "Field" },
    { PropertyType = "Private", Type = "Editor", Name = "Editor" },
    { PropertyType = "Private", Type = "bool", Name = "HasBeenInitialized" },
    { PropertyType = "Private", Type = "ButtonText", Name = "NullText" },
    { PropertyType = "Public", Type = "PrefabRoot?", Name = "PrefabRoot", GetterContent = "return Editor.PrefabRoot;", HasSetter = false },
    { PropertyType = "Private", Type = "(object Component, ButtonText Text)?", Name = "SelectedComponent", SetterContent = """
(SelectedComponent?.Text ?? NullText).Color = System.Drawing.Color.White;
_SelectedComponent = value;
(SelectedComponent?.Text ?? NullText).Color = System.Drawing.Color.DeepSkyBlue;
""" },
]
Events = [
    { EventType = "Notification", Name = "EditorInitialize", Content = """
Editor = notification.Editor;
""" },
    { EventType = "Notification", Name = "Initialize", Content = """
if (HasBeenInitialized) return;

NullText = Project.Instantiate<ButtonText>("Prefabs.Gui.ButtonText");
NullText.TextString = "Default value";
NullText.LocalScale = (0.5, 0.5);
NullText.Justification = TextJustification.Left;
NullText.Clicked += () => SelectedComponent = null;
if (Field.Value is null)
    SelectedComponent = null;

foreach ((object component, ComponentUtils.ReferencePath? reference) in ComponentUtils.GetAllReferencesToComponentsOfType(PrefabRoot.RootObject, ComponentType, true)
             .Where(pair => PrefabRoot.Components.Contains(pair.Component))
             .Concat(PrefabRoot.Components
                 .Where(component => component.GetType().IsAssignableTo(ComponentType))
                 .Select(component => (component, (ComponentUtils.ReferencePath?) null)))
             .DistinctBy(pair => pair.Item1))
{
    ButtonText text = Project.Instantiate<ButtonText>("Prefabs.Gui.ButtonText");
    
    if (reference is null)
        text.TextString = $"Unparented {component.GetType().Name}";
    else if (reference.Component is IHasChildren hasChildren && hasChildren.Children.Contains(component))
        text.TextString = $"{component.GetType().Name} under\\n\\t{reference}";
    else
        text.TextString = $"{component.GetType().Name} on\\n\\t{reference}";
    
    text.LocalScale = (0.5, 0.5);
    text.Justification = TextJustification.Left;
    
    text.Clicked += () => SelectedComponent = (component, text);
    if (component == Field.Value)
        SelectedComponent = (component, text);
    
    ComponentList.AddChild(text);
}

ComponentList.AddChild(NullText);
""" },
    { EventType = "Reference", Target = "Window", Name = "CloseWindowRequest", Args = [], Content = """
Hierarchy.Parent.QueueRemoveChild(this);
""" },
]
Functions = [
    { ReturnType = "void", Name = "UseNewComponent", Args = [], Content = """
object component = Project.Instantiate<object>(ComponentType.FullName);
Field.Value = component;
""" },
    { ReturnType = "void", Name = "UseSelectedComponent", Args = [], Content = """
Field.Value = SelectedComponent?.Component ?? throw new NotImplementedException("Figure out how to use a default value");
""" },
]

[This.Values]
Window = "1"
ComponentList = "11"

[1]
Prefab = "Prefabs.Gui.FullRectWindow"
[1.Values]
Margin = 10.0
LocalSize = { X = 300, Y = 400 }
Depth = 15
Children = [ "4" ]

[2]
Prefab = "Prefabs.Gui.ButtonRect"
Properties = [
    { PropertyType = "Reference", Type = "SelectReferenceWindow", Name = "SelectReferenceWindow" },
    { PropertyType = "Reference", Type = "FullRectWindow", Name = "Window" },
]
Events = [
    { EventType = "Self", Target = "Button", Name = "Clicked", Args = [], Content = """
Window.CloseWindow();
SelectReferenceWindow.UseNewComponent();
""" },
]
[2.Values]
Margin = 5.0
Children = [ "3" ]
SelectReferenceWindow = "This"
Window = "1"

[3]
Prefab = "Prefabs.Gui.TextRect"
[3.Values]
TextString = "Add New Component"
LocalScale = { X = 0.5, Y = 0.5 }

[4]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[4.Values]
Children = [ "10", "2", "5" ]

[5]
Prefab = "Prefabs.Gui.HLayoutWithHierarchy"
[5.Values]
Children  = [ "6", "8" ]

[6]
Prefab = "Prefabs.Gui.ButtonRect"
Properties = [
    { PropertyType = "Reference", Type = "FullRectWindow", Name = "Window" },
]
Events = [
    { EventType = "Self", Target = "Button", Name = "Clicked", Args = [], Content = """
Window.CloseWindow();
""" },
]
[6.Values]
HorizontalExpand = true
Margin = 5.0
Children = [ "7" ]
Window = "1"

[7]
Prefab = "Prefabs.Gui.TextRect"
[7.Values]
TextString = "Cancel"
LocalScale = { X = 0.5, Y = 0.5 }

[8]
Prefab = "Prefabs.Gui.ButtonRect"
Properties = [
    { PropertyType = "Reference", Type = "SelectReferenceWindow", Name = "SelectReferenceWindow" },
    { PropertyType = "Reference", Type = "FullRectWindow", Name = "Window" },
]
Events = [
    { EventType = "Self", Target = "Button", Name = "Clicked", Args = [], Content = """
Window.CloseWindow();
SelectReferenceWindow.UseSelectedComponent();
""" },
]
[8.Values]
HorizontalExpand = true
Margin = 5.0
Children = [ "9" ]
SelectReferenceWindow = "This"
Window = "1"

[9]
Prefab = "Prefabs.Gui.TextRect"
[9.Values]
TextString = "Confirm"
LocalScale = { X = 0.5, Y = 0.5 }

[10]
Prefab = "Prefabs.Gui.FullRectWithHierarchy"
[10.Values]
VerticalExpand = true
Margin = 5.0
Children = [ "11" ]

[11]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[11.Values]
Spacing = 5