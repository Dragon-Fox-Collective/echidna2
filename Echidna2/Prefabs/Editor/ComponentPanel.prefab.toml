Using = ["Notifications.Editor", "Echidna2.Prefabs.Gui", "System.Reflection", "Echidna2.Gui", "Prefabs.Editor.FieldEditors", "System.Drawing"]

[This]
Properties = [
    { PropertyType = "Component", Type = "FullRectWithHierarchy", Name = "Rect" },
    { PropertyType = "Reference", Type = "TextRect", Name = "PrefabNameText" },
    { PropertyType = "Reference", Type = "TextRect", Name = "ComponentNameText" },
    { PropertyType = "Reference", Type = "ICanAddChildren", Name = "Fields" },
    { PropertyType = "Reference", Type = "ICanAddChildren", Name = "Components" },
    { PropertyType = "Private", Type = "Editor", Name = "Editor" },
    { PropertyType = "Public", Type = "object?", Name = "SelectedObject", SetterContent = """
_SelectedObject = value;
if (SelectedObject is not null)
{
    if (SelectedObject is INamed named)
        named.NameChanged += name => PrefabNameText.TextString = name;
    PrefabNameText.TextString = INamed.GetName(SelectedObject);
}
else
{
    PrefabNameText.TextString = "No object selected";
}

SelectedComponent = null;

INotificationPropagator.NotificationFinished += RefreshComponents;
""" },
    { PropertyType = "Public", Type = "object?", Name = "SelectedComponent", SetterContent = """
_SelectedComponent = value;
INotificationPropagator.NotificationFinished += RefreshFields;
""" },
]
Events = [
    { EventType = "Notification", Name = "EditorInitialize", Content = """
Editor = notification.Editor;
""" },
]
Functions = [
    { ReturnType = "void", Name = "RefreshFields", Args = [], Content = """
if (SelectedComponent is null)
    RefreshFavoritedFields();
else
    RefreshSelectedComponentFields();
""" },
    { FunctionType = "Private", ReturnType = "void", Name = "RefreshFavoritedFields", Args = [], Content = """
Fields.ClearChildren();
if (Editor.PrefabRoot is null) return;
if (SelectedObject is null) return;

ComponentNameText.TextString = "Favorites";

List<object> availableComponents = Editor.PrefabRoot.GetAllComponentsOf(SelectedObject).ToList();
IEnumerable<(object Component, MemberInfo Member)> availableFields = Editor.PrefabRoot.FavoriteFields
    .Where(zip => availableComponents.Contains(zip.Component));

if (Editor.PrefabRoot.ChildPrefabs.FirstOrDefault(prefab => prefab.PrefabRoot.RootObject == SelectedObject) is { } selectedPrefab)
    availableFields = availableFields.Concat(selectedPrefab.PrefabRoot.FavoriteFields);

foreach ((object component, MemberInfo member) in availableFields)
    AddField(member, component);
""" },
    { FunctionType = "Private", ReturnType = "void", Name = "RefreshSelectedComponentFields", Args = [], Content = """
Fields.ClearChildren();
if (SelectedComponent is null) return;

ComponentNameText.TextString = SelectedComponent.GetType().Name;

foreach (MemberInfo member in SelectedComponent.GetType()
             .GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
             .Where(member => member.GetCustomAttribute<SerializedValueAttribute>() is not null ||
                              member.GetCustomAttribute<SerializedReferenceAttribute>() is not null))
    AddField(member, SelectedComponent);
""" },
    { FunctionType = "Private", ReturnType = "void", Name = "AddField", Args = [{ Type = "MemberInfo", Name = "member" }, { Type = "object", Name = "component" }], Content = """
HLayoutWithHierarchy layout = Project.Instantiate<HLayoutWithHierarchy>("Prefabs.Gui.HLayoutWithHierarchy");
layout.Name = member.Name + " Field Layout";
Fields.AddChild(layout);

FullLayoutWithHierarchy textClipper = Project.Instantiate<FullLayoutWithHierarchy>("Prefabs.Gui.FullLayoutWithHierarchy");
textClipper.ClipChildren = true;
layout.AddChild(textClipper);

TextRect text = Project.Instantiate<TextRect>("Prefabs.Gui.TextRect");
text.TextString = member.Name;
text.LocalScale = (0.5, 0.5);
text.MinimumSize = (300, 0);
text.Justification = TextJustification.Left;
textClipper.AddChild(text);

IMemberWrapper wrapper = IMemberWrapper.Wrap(member);
IFieldEditor? fieldEditor =
    member.GetCustomAttribute<SerializedValueAttribute>() is not null ? Editor.HasRegisteredFieldEditor(wrapper.FieldType) ? Editor.InstantiateFieldEditor(wrapper.FieldType) : null :
    member.GetCustomAttribute<SerializedReferenceAttribute>() is not null ? NewReferenceFieldEditorOfType(wrapper.FieldType) :
    null;
if (fieldEditor is not null)
{
    fieldEditor.Load(wrapper.GetValue(component));
    fieldEditor.ValueChanged += value =>
    {
        wrapper.SetValue(component, value);
        Editor.PrefabRoot?.SerializeChange(component, wrapper.Name, value);
        Editor.SerializePrefab();
    };
    layout.AddChild(fieldEditor);
}

ButtonRect favoriteButton = Project.Instantiate<ButtonRect>("Prefabs.Gui.ButtonRect");
favoriteButton.MinimumSize = (25, 25);
favoriteButton.Clicked += () =>
{
    if (Editor.PrefabRoot is null) return;
    
    if (!Editor.PrefabRoot.FavoriteFields.Remove((component, member)))
        Editor.PrefabRoot.FavoriteFields.Add((component, member));
    
    Editor.SerializePrefab();
};
layout.AddChild(favoriteButton);

FieldEditors.ReferenceFieldEditor NewReferenceFieldEditorOfType(Type type)
{
    FieldEditors.ReferenceFieldEditor referenceFieldEditor = Project.Instantiate<FieldEditors.ReferenceFieldEditor>("Prefabs.Editor.FieldEditors.ReferenceFieldEditor");
    referenceFieldEditor.ComponentType = type;
    INotificationPropagator.Notify(new EditorInitialize_Notification(Editor), referenceFieldEditor);
    return referenceFieldEditor;
}
""" },
    { ReturnType = "void", Name = "RefreshComponents", Args = [], Content = """
Components.ClearChildren();
if (SelectedObject is null) return;

{
    ButtonRect favoritesButton = Project.Instantiate<ButtonRect>("Prefabs.Editor.ComponentSelectionButton");
    favoritesButton.Clicked += () => SelectedComponent = null;
    favoritesButton.MinimumSize = (40, 40);
    Components.AddChild(favoritesButton);
}

foreach (object component in Editor.PrefabRoot.GetAllOwnedComponentsOf(SelectedObject))
{
    ButtonRect button = Project.Instantiate<ButtonRect>("Prefabs.Editor.ComponentSelectionButton");
    button.Clicked += () => SelectedComponent = component;
    Components.AddChild(button);
}

{
    ButtonRect addButton = Project.Instantiate<ButtonRect>("Prefabs.Editor.ComponentSelectionButton");
    addButton.Clicked += () =>
    {
        AddComponentWindow window = Project.Instantiate<AddComponentWindow>("Prefabs.Editor.AddComponentWindow");
        window.SelectedObject = SelectedObject;
        INotificationPropagator.Notify(new EditorInitialize_Notification(Editor), window);
        Editor.QueueAddChild(window);
    };
    addButton.MinimumSize = (20, 20);
    Components.AddChild(addButton);
}
""" },
]

[This.Values]
Name = "Component Panel"
Rect = "1"
PrefabNameText = "3"
ComponentNameText = "4"
Fields = "5"
Components = "7"

[1]
Prefab = "Prefabs.Gui.FullRectWithHierarchy"
[1.Values]
Margin = 10.0
Children = [ "6" ]

[2]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[2.Values]
Name = "Interior Layout"
HorizontalExpand = true
Children = [ "3", "4", "5" ]

[3]
Prefab = "Prefabs.Gui.TextRect"
[3.Values]
Name = "Object Name"
LocalScale = { X = 0.5, Y = 0.5 }

[4]
Prefab = "Prefabs.Gui.TextRect"
[4.Values]
Name = "Component Class"
LocalScale = { X = 0.5, Y = 0.5 }

[5]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[5.Values]
Name = "Fields"

[6]
Prefab = "Prefabs.Gui.HLayoutWithHierarchy"
[6.Values]
Name = "Horizontal Split"
Children = [ "2", "7" ]

[7]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[7.Values]
Name = "Component List"