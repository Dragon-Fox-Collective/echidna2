Using = ["Notifications.Editor", "Echidna2.Prefabs.Gui", "System.Reflection", "Echidna2.Gui", "Prefabs.Editor.FieldEditors", "System.Drawing", "Prefabs.Gui", "TooManyExtensions"]

[This]
Properties = [
    { PropertyType = "Component", Type = "FullRectWithHierarchy", Name = "Rect" },
    { PropertyType = "Reference", Type = "TextRect", Name = "PrefabNameText" },
    { PropertyType = "Reference", Type = "TextRect", Name = "ComponentNameText" },
    { PropertyType = "Reference", Type = "ICanAddChildren", Name = "Fields" },
    { PropertyType = "Reference", Type = "ICanAddChildren", Name = "Properties" },
    { PropertyType = "Reference", Type = "ICanAddChildren", Name = "Events" },
    { PropertyType = "Reference", Type = "ICanAddChildren", Name = "Functions" },
    { PropertyType = "Reference", Type = "ICanAddChildren", Name = "Components" },
    { PropertyType = "Private", Type = "Editor", Name = "Editor" },
    { PropertyType = "Public", Type = "Option<ComponentPair>", Name = "SelectedObject", SetterContent = """
_SelectedObject = value;
if (SelectedObject.TrySome(out var selectedObject))
{
    if (selectedObject.Object is INamed named)
        named.NameChanged += name => PrefabNameText.TextString = name;
    PrefabNameText.TextString = INamed.GetName(selectedObject.Object);
}
else
{
    PrefabNameText.TextString = "No object selected";
}

SelectedComponent = Option.None<ComponentPair>();

INotificationPropagator.NotificationFinished += RefreshComponents;
""" },
    { PropertyType = "Public", Type = "Option<ComponentPair>", Name = "SelectedComponent", SetterContent = """
_SelectedComponent = value;
INotificationPropagator.NotificationFinished += RefreshFields;
""" },
]
Events = [
    { EventType = "Notification", Name = "EditorInitialize", Content = """
Editor = notification.Editor;
""" },
]
Functions = [
    { ReturnType = "void", Name = "RefreshFields", Args = [], Content = """
if (SelectedComponent.TryNone(out var selectedComponent))
    RefreshFavoritedFields();
else
    RefreshSelectedComponentFields(selectedComponent);
""" },
    { FunctionType = "Private", ReturnType = "void", Name = "RefreshFavoritedFields", Args = [], Content = """
ClearFields();
if (Editor.PrefabRoot is null) return;
if (SelectedObject.TryNone(out var selectedObject)) return;

Console.WriteLine($"Refreshing favorite fields for {selectedObject}");

ComponentNameText.TextString = "Favorites";

List<ComponentPair> availableComponents = Editor.PrefabRoot.GetAllComponentsOf(selectedObject).ToList();
IEnumerable<(ComponentPair, IMemberWrapper)> availableFields = Editor.PrefabRoot.FavoriteFields
    .Where(zip => availableComponents.Contains(zip.Component));

if (Editor.PrefabRoot.ChildPrefabs.TryFirst(prefab => prefab.PrefabRoot.RootObject == selectedObject.Object, out var selectedPrefab))
    availableFields = availableFields.Concat(selectedPrefab.PrefabRoot.FavoriteFields);

foreach ((ComponentPair component, IMemberWrapper member) in availableFields)
    AddField(member, component);
""" },
    { FunctionType = "Private", ReturnType = "void", Name = "RefreshSelectedComponentFields", Args = [{ Type = "ComponentPair", Name = "selectedComponent" }], Content = """
ClearFields();

Console.WriteLine($"Refreshing fields for {selectedComponent}");

ComponentNameText.TextString = selectedComponent.Object.GetType().Name;

foreach (var property in selectedComponent.Component.Properties)
{
    VLayoutWithHierarchy layout = Project.Instantiate<VLayoutWithHierarchy>("Prefabs.Gui.VLayoutWithHierarchy");
    Events.AddChild(layout);
    
    {
        HLayoutWithHierarchy hLayout = Project.Instantiate<HLayoutWithHierarchy>("Prefabs.Gui.HLayoutWithHierarchy");
        layout.AddChild(hLayout);
        
        FullLayoutWithHierarchy textClipper = Project.Instantiate<FullLayoutWithHierarchy>("Prefabs.Gui.FullLayoutWithHierarchy");
        textClipper.ClipChildren = true;
        hLayout.AddChild(textClipper);
        
        TextRect text = Project.Instantiate<TextRect>("Prefabs.Gui.TextRect");
        text.TextString = property.Name;
        text.LocalScale = (0.5, 0.5);
        text.MinimumSize = (300, 0);
        text.Justification = TextJustification.Left;
        textClipper.AddChild(text);
        
        ButtonRectWithText removeButton = Project.Instantiate<ButtonRectWithText>("Prefabs.Gui.ButtonRectWithText");
        removeButton.Name = "Remove Button";
        removeButton.TextString = "Remove";
        removeButton.HorizontalExpand = true;
        removeButton.Clicked += _ =>
        {
            selectedComponent.Component.Properties.Remove(property);
            selectedComponent.Component.Values.Remove(property.Name);
        };
        hLayout.AddChild(removeButton);
    }
    
    {
        HLayoutWithHierarchy hLayout = Project.Instantiate<HLayoutWithHierarchy>("Prefabs.Gui.HLayoutWithHierarchy");
        layout.AddChild(hLayout);
        
        FullLayoutWithHierarchy textClipper = Project.Instantiate<FullLayoutWithHierarchy>("Prefabs.Gui.FullLayoutWithHierarchy");
        textClipper.ClipChildren = true;
        hLayout.AddChild(textClipper);
        
        TextRect text = Project.Instantiate<TextRect>("Prefabs.Gui.TextRect");
        text.TextString = "Name";
        text.LocalScale = (0.5, 0.5);
        text.MinimumSize = (300, 0);
        text.Justification = TextJustification.Left;
        textClipper.AddChild(text);
        
        IFieldEditor fieldEditor = Editor.InstantiateFieldEditor(typeof(string))!;
        fieldEditor.Load(property.Name);
        fieldEditor.ValueChanged += value =>
        {
            selectedComponent.Component.Values.Remove(property.Name, out var oldValue);
            property.Name = (string)value;
            selectedComponent.Component.Values[property.Name] = oldValue;
            Editor.SerializePrefab();
        };
        hLayout.AddChild(fieldEditor);
    }
    
    {
        HLayoutWithHierarchy hLayout = Project.Instantiate<HLayoutWithHierarchy>("Prefabs.Gui.HLayoutWithHierarchy");
        layout.AddChild(hLayout);
        
        FullLayoutWithHierarchy textClipper = Project.Instantiate<FullLayoutWithHierarchy>("Prefabs.Gui.FullLayoutWithHierarchy");
        textClipper.ClipChildren = true;
        hLayout.AddChild(textClipper);
        
        TextRect text = Project.Instantiate<TextRect>("Prefabs.Gui.TextRect");
        text.TextString = "Type";
        text.LocalScale = (0.5, 0.5);
        text.MinimumSize = (300, 0);
        text.Justification = TextJustification.Left;
        textClipper.AddChild(text);
        
        IFieldEditor fieldEditor = Editor.InstantiateFieldEditor(typeof(string))!;
        fieldEditor.Load(property.Type);
        fieldEditor.ValueChanged += value =>
        {
            property.Type = (string)value;
            Editor.SerializePrefab();
        };
        hLayout.AddChild(fieldEditor);
    }
}

foreach (var eventListener in selectedComponent.Component.EventListeners)
{
    HLayoutWithHierarchy layout = Project.Instantiate<HLayoutWithHierarchy>("Prefabs.Gui.HLayoutWithHierarchy");
    Events.AddChild(layout);
    
    FullLayoutWithHierarchy textClipper = Project.Instantiate<FullLayoutWithHierarchy>("Prefabs.Gui.FullLayoutWithHierarchy");
    textClipper.ClipChildren = true;
    layout.AddChild(textClipper);
    
    TextRect text = Project.Instantiate<TextRect>("Prefabs.Gui.TextRect");
    text.TextString = eventListener.Name;
    text.LocalScale = (0.5, 0.5);
    text.MinimumSize = (300, 0);
    text.Justification = TextJustification.Left;
    textClipper.AddChild(text);
}

foreach (var function in selectedComponent.Component.Functions)
{
    HLayoutWithHierarchy layout = Project.Instantiate<HLayoutWithHierarchy>("Prefabs.Gui.HLayoutWithHierarchy");
    Functions.AddChild(layout);
    
    FullLayoutWithHierarchy textClipper = Project.Instantiate<FullLayoutWithHierarchy>("Prefabs.Gui.FullLayoutWithHierarchy");
    textClipper.ClipChildren = true;
    layout.AddChild(textClipper);
    
    TextRect text = Project.Instantiate<TextRect>("Prefabs.Gui.TextRect");
    text.TextString = function.Name;
    text.LocalScale = (0.5, 0.5);
    text.MinimumSize = (300, 0);
    text.Justification = TextJustification.Left;
    textClipper.AddChild(text);
}

foreach (IMemberWrapper member in Editor.PrefabRoot.GetAllSerializedFieldsOf(selectedComponent))
    AddField(member, selectedComponent);
""" },
    { FunctionType = "Private", ReturnType = "void", Name = "AddField", Args = [{ Type = "IMemberWrapper", Name = "member" }, { Type = "ComponentPair", Name = "component" }], Content = """
HLayoutWithHierarchy layout = Project.Instantiate<HLayoutWithHierarchy>("Prefabs.Gui.HLayoutWithHierarchy");
layout.Name = member.Name + " Field Layout";
Fields.AddChild(layout);

FullLayoutWithHierarchy textClipper = Project.Instantiate<FullLayoutWithHierarchy>("Prefabs.Gui.FullLayoutWithHierarchy");
textClipper.ClipChildren = true;
layout.AddChild(textClipper);

TextRect text = Project.Instantiate<TextRect>("Prefabs.Gui.TextRect");
text.TextString = member.Name;
text.LocalScale = (0.5, 0.5);
text.MinimumSize = (300, 0);
text.Justification = TextJustification.Left;
textClipper.AddChild(text);

IFieldEditor? fieldEditor =
    member.GetCustomAttribute<SerializedValueAttribute>() is not null ? Editor.HasRegisteredFieldEditor(member.FieldType) ? Editor.InstantiateFieldEditor(member.FieldType) : null :
    member.GetCustomAttribute<SerializedReferenceAttribute>() is not null ? NewReferenceFieldEditorOfType(member.FieldType) :
    null;
if (fieldEditor is not null)
{
    fieldEditor.Load(member.GetValue(component.Object));
    fieldEditor.ValueChanged += value =>
    {
        member.SetValue(component.Object, value);
        component.Component.Values[member.Name] = value;
        Editor.SerializePrefab();
    };
    layout.AddChild(fieldEditor);
}

ButtonRect favoriteButton = Project.Instantiate<ButtonRect>("Prefabs.Gui.ButtonRect");
favoriteButton.MinimumSize = (25, 25);
favoriteButton.Clicked += _ =>
{
    if (Editor.PrefabRoot is null) return;
    
    if (!Editor.PrefabRoot.FavoriteFields.Remove((component, member)))
        Editor.PrefabRoot.FavoriteFields.Add((component, member));
    
    Editor.SerializePrefab();
};
layout.AddChild(favoriteButton);

FieldEditors.ReferenceFieldEditor NewReferenceFieldEditorOfType(Type type)
{
    FieldEditors.ReferenceFieldEditor referenceFieldEditor = Project.Instantiate<FieldEditors.ReferenceFieldEditor>("Prefabs.Editor.FieldEditors.ReferenceFieldEditor");
    referenceFieldEditor.ComponentType = type;
    INotificationPropagator.Notify(new EditorInitializeNotification(Editor), referenceFieldEditor);
    return referenceFieldEditor;
}
""" },
    { ReturnType = "void", Name = "ClearFields", Args = [], Content = """
Fields.ClearChildren();
Properties.ClearChildren();
Events.ClearChildren();
Functions.ClearChildren();
""" },
    { ReturnType = "void", Name = "RefreshComponents", Args = [], Content = """
Components.ClearChildren();
if (SelectedObject.TryNone(out var selectedObject)) return;

{
    ButtonRect favoritesButton = Project.Instantiate<ButtonRect>("Prefabs.Editor.ComponentSelectionButton");
    favoritesButton.Clicked += _ => SelectedComponent = Option.None<ComponentPair>();
    favoritesButton.MinimumSize = (40, 40);
    Components.AddChild(favoritesButton);
}

Console.WriteLine($"Refreshing components for {selectedObject}, {Editor.PrefabRoot.GetAllOwnedComponentsOf(selectedObject).ToDelimString()}");
foreach (ComponentPair component in Editor.PrefabRoot.GetAllOwnedComponentsOf(selectedObject))
{
    ButtonRect button = Project.Instantiate<ButtonRect>("Prefabs.Editor.ComponentSelectionButton");
    button.Clicked += _ => SelectedComponent = Option.Some(component);
    Components.AddChild(button);
}

{
    ButtonRect addButton = Project.Instantiate<ButtonRect>("Prefabs.Editor.ComponentSelectionButton");
    addButton.Clicked += _ =>
    {
        AddComponentWindow window = Project.Instantiate<AddComponentWindow>("Prefabs.Editor.AddComponentWindow");
        window.SelectedObject = selectedObject.Object;
        INotificationPropagator.Notify(new EditorInitializeNotification(Editor), window);
        Editor.QueueAddChild(window);
    };
    addButton.MinimumSize = (20, 20);
    Components.AddChild(addButton);
}
""" },
]

[This.Values]
Name = "Component Panel"
Rect = "1"
PrefabNameText = "3"
ComponentNameText = "4"
Fields = "5"
Properties = "9"
Events = "12"
Functions = "14"
Components = "7"

[1]
Prefab = "Prefabs.Gui.FullRectWithHierarchy"
[1.Values]
Margin = 10.0
Children = [ "6" ]

[2]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[2.Values]
Name = "Interior Layout"
HorizontalExpand = true
Children = [ "3", "4", "8" ]

[3]
Prefab = "Prefabs.Gui.TextRect"
[3.Values]
Name = "Object Name"
LocalScale = { X = 0.5, Y = 0.5 }

[4]
Prefab = "Prefabs.Gui.TextRect"
[4.Values]
Name = "Component Class"
LocalScale = { X = 0.5, Y = 0.5 }

[5]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[5.Values]
Name = "Fields"

[6]
Prefab = "Prefabs.Gui.HLayoutWithHierarchy"
[6.Values]
Name = "Horizontal Split"
Children = [ "2", "7" ]

[7]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[7.Values]
Name = "Component List"

[8]
Prefab = "Prefabs.Gui.ScrollArea"
[8.Values]
Name = "Fields Scroll Area"
Content = [ "11" ]
VerticalExpand = true

[9]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[9.Values]
Name = "Properties"

[10]
Prefab = "Prefabs.Gui.TextRect"
[10.Values]
Name = "Properties Label"
LocalScale = { X = 0.5, Y = 0.5 }
TextString = "Properties"

[11]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[11.Values]
Name = "Scroll Area Content"
Children = [ "10", "9", "16", "13", "12", "17", "15", "14", "18", "5" ]

[12]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[12.Values]
Name = "Events"

[13]
Prefab = "Prefabs.Gui.TextRect"
[13.Values]
Name = "Events Label"
LocalScale = { X = 0.5, Y = 0.5 }
TextString = "Events"

[14]
Prefab = "Prefabs.Gui.VLayoutWithHierarchy"
[14.Values]
Name = "Functions"

[15]
Prefab = "Prefabs.Gui.TextRect"
[15.Values]
Name = "Functions Label"
LocalScale = { X = 0.5, Y = 0.5 }
TextString = "Functions"

[16]
Prefab = "Prefabs.Gui.HBar"

[17]
Prefab = "Prefabs.Gui.HBar"

[18]
Prefab = "Prefabs.Gui.HBar"